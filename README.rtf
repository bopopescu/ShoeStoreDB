{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11260\viewh10540\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1. Our Shoe Store project is a web application that provides the user (people within the shoestore) with data on employees and the ability to create employees, read employee data, edit employee data, and delete a specific employee.\
\
In order for the project to run on our server (we used PyCharm as our IDE), we downloaded bootstrap and jQuery (but those are all in the files we provided so you should be able to run it). You would only need to import flask and flask_mysqldb in your terminal. To be more specific, if you don\'92t have those installed, you should type in \'93pip install flask\'94  and \'93pip install flask_mysqldb\'94. To run the project, just press the run button next to \'93if__name__== \'93__main__\'94 on line 91. Click on the link provided in the Python console, and you should be able to see what we showed you during our presentation and preform the CRUD operations accordingly! Another thing to take note is we assumed that this would be an employee\'92s server so we never used authentication (prompted the user for their username and password). In order for you to run this smoothly, you would have to go into App.py and manually change your host, user, and mysql password. This should be on lines 6-9 in the App.py file..\
\
2. The index.html file contains all of the specifications of the webpage, like the header, footer, the general formatting of the page and buttons. The App.py file is where we put all the CRUD operations, more specifically, the insert, update and delete functions are linked through the variables we have in the employee table from index.html (like employee_id, salary, first_name, etc). Then there\'92s a SQL statement embedded in the methods so when the method is executed, it would be able to update the SQL database accordingly.\
\
3. The UML and EER models are provided in the other files.\
\
4. Since our webpage is interactive, the CRUD operations are pretty self-explanatory. To create an employee, simply click on \'93Add Employee Data\'94 on the righthand corner of the screen and fill in the fields. To view the data, you could press command f and find the employee accordingly. To edit the employee data, click on the blue edit button, and edit the fields accordingly. To delete, press the red delete button to delete an employee. You may notice that there are 4 other buttons (shoe data, branch data, customer data, invoice data) that doesn\'92t really do anything. That\'92s because we worked very hard on the front end that we didn\'92t get enough time to implement the rest of the functionalities, but it basically will look the same as this current employee page if implemented fully. We understand that we didn\'92t fully implement these functionalities, but we worked super hard on this!!! Hope you understand.\
\
5. Lesson Learned\
	5.1. Technical expertise gained: Both of us come from having little to no Python background and we basically knew very little about webpage designs overall. This project took a lot of research and trial and error to complete, and we are very proud to have gained python and html knowledge from this project.\
	5.2. Group work insights: We learned a lot about how shoe inventory and employee inventory works. Delegating tasks proved to be the most efficient way for us to finish the project on time since it\'92s a self motivated project (since there aren\'92t specific deadlines apart from the project proposal) which is why we ran into time management problems with not being able to fully finish the webpage UI.\
	5.3. Realized or contemplated design: We worked back and forth on the UI of this project. Initially, we wanted it to be a command line based project, but eventually settled on working with a UI because we thought it would be a better representation of our work. \
	5.4. Document any code not working: As mentioned previously, we didn\'92t have time to work on the functionalists of shoe data, branch data, customer data, invoice data. It\'92s not necessarily \'93not working\'94, but it just not fully implemented.\
\
6. Future work\
	6.1. Planned uses of the database: this database is useful for anyone who works in either shoe retail or retail. \
	6.2. Potential areas for added functionality: Finishing the CRUD for the rest of the tables and having a specific search function that finds a specific tuple instead of a live update view.\
\
\
Thank you for reading our project! We hope you had a good time reading through this.\
\
\
\
}